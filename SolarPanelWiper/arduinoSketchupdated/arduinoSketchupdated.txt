#include <Wire.h>
#include <RTClib.h>

RTC_DS3231 rtc;  // Create an RTC object for DS3231

// Define pins
#define RELAY_POWER  8  // Relay for main power control
#define RELAY_CW  10    // Relay for clockwise motion
#define RELAY_CCW 11    // Relay for counterclockwise motion
#define PUMP 12         // Pump relay
#define IR_CW A0      // IR sensor for CW end
#define IR_CCW 6   

bool automaticMode = true; // Auto mode enabled by default
bool running = false;
unsigned long lastCleanTime = 0;  // Stores the last cleaning timestamp
const unsigned long CLEAN_INTERVAL = 12UL * 60 * 60 * 1000; // 12 hours in milliseconds
bool rtcAvailable = false; // Flag to track if RTC is available

void setup() {
    pinMode(RELAY_POWER, OUTPUT);
    pinMode(RELAY_CW, OUTPUT);
    pinMode(RELAY_CCW, OUTPUT);
    pinMode(PUMP, OUTPUT);
    pinMode(IR_CW, INPUT);
    pinMode(IR_CCW, INPUT);
    
    // Set relays and pump to HIGH by default (inactive state)
    digitalWrite(RELAY_POWER, HIGH);
    digitalWrite(RELAY_CW, HIGH);
    digitalWrite(RELAY_CCW, HIGH);
    digitalWrite(PUMP, HIGH);
    
    Serial.begin(9600);  // Default hardware serial for both Bluetooth and USB
    Serial.println("Initializing system...");
    
    printAutoModeStatus();
    printHelp();
    lastCleanTime = millis();

    // Try to initialize RTC
    if (!rtc.begin()) {
        rtcAvailable = false;
    } else {
        rtcAvailable = true;
        if (rtc.lostPower()) {
            rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));  // Set RTC to the compile time
        }
    }
}

void loop() {
    if (rtcAvailable) {
        DateTime now = rtc.now();  // Get current time from RTC
        
        // Check if the time is 6 AM or 6 PM
        if ((now.hour() == 6 || now.hour() == 18) && now.minute() == 0 && now.second() == 0) {
            if (!running) {  // Prevent multiple triggers in the same second
                Serial.println("Starting automatic clean...");
                running = true;
                manualClean();
                lastCleanTime = millis();
                running = false;
            }
        }
    } else {
        // If RTC is not available, fallback to the interval-based cleaning
        if (automaticMode && (millis() - lastCleanTime >= CLEAN_INTERVAL)) {
            Serial.println("Starting automatic clean...");
            running = true;
            manualClean();
            lastCleanTime = millis();
            running = false;
        }
    }
    
    if (Serial.available()) {
        String command = Serial.readStringUntil('\n');
        command.trim();
        Serial.print("Received command: ");
        Serial.println(command);
        processCommand(command);
    }
}

void processCommand(String command) {
    if (command == "CLEAN") {
        Serial.println("Starting manual clean...");
        manualClean();
        lastCleanTime = millis();
    } else if (command == "AUTO_ON") {
        Serial.println("Automatic mode enabled.");
        automaticMode = true;
    } else if (command == "AUTO_OFF") {
        Serial.println("Automatic mode disabled.");
        automaticMode = false;
    } else if (command == "HELP") {
        printHelp();
    } else if (command == "TIME_LEFT") {
        printTimeLeft();
    } else {
        Serial.println("Invalid command. Type HELP for available commands.");
    }
    Serial.println("Command executed successfully.");
}

void manualClean() {
    int timedelay = 8000;
    Serial.println("Turning on pump...");
    digitalWrite(PUMP, LOW);
    delay(5000); // Pump runs for 5 seconds before motor moves
    
    Serial.println("Turning on motor power...");
    digitalWrite(RELAY_POWER, LOW);
    
    Serial.println("Moving clockwise...");
     while (isObjectDetected(IR_CW)) {
        delay(100);
    }
    Serial.println("Clockwise limit reached. Stopping...");
    digitalWrite(RELAY_POWER, HIGH);

    Serial.println("Turning off pump...");
    digitalWrite(PUMP, HIGH);
    
    delay(500);
    
    Serial.println("Moving counterclockwise...");
    digitalWrite(RELAY_POWER, LOW);
    digitalWrite(RELAY_CW, LOW);
    digitalWrite(RELAY_CCW, LOW);
    while (isObjectDetected(IR_CCW)) {
        delay(100);
    }
    Serial.println("Counterclockwise limit reached. Stopping...");
    digitalWrite(RELAY_POWER, HIGH);
    digitalWrite(RELAY_CW, HIGH);
    digitalWrite(RELAY_CCW, HIGH);
    
    Serial.println("Turning off motor power...");
    digitalWrite(RELAY_POWER, HIGH);
}

bool isPressed(int pin) {
    if (digitalRead(pin)) {
        delay(50); // Debounce delay
        return digitalRead(pin);
    }
    return false;
}

void printAutoModeStatus() {
    Serial.print("Automatic mode is ");
    Serial.println(automaticMode ? "enabled" : "disabled");
}

void printHelp() {
    Serial.println("Available Commands:");
    Serial.println("1. CLEAN - Start manual clean process");
    Serial.println("2. AUTO_ON - Enable automatic mode");
    Serial.println("3. AUTO_OFF - Disable automatic mode");
    Serial.println("4. HELP - Show this help message");
}

void printTimeLeft() {
    unsigned long elapsedTime = millis() - lastCleanTime;
    unsigned long remainingTime = CLEAN_INTERVAL - elapsedTime;
    
    if (remainingTime > 0) {
        int hours = remainingTime / (60 * 60 * 1000);
        int minutes = (remainingTime % (60 * 60 * 1000)) / (60 * 1000);
        int seconds = (remainingTime % (60 * 1000)) / 1000;
        
        Serial.print("Time left for next auto clean: ");
        Serial.print(hours);
        Serial.print("h ");
        Serial.print(minutes);
        Serial.print("m ");
        Serial.print(seconds);
        Serial.println("s");
    } else {
        Serial.println("Auto clean will start shortly...");
    }
}

bool isObjectDetected(int pin) {
    return digitalRead(pin);
}
